@page "/MyDevice"
@namespace Functionland.FxBlox.Client.Core.Pages
@inherits AppComponentBase

<PageTitle>@Localizer[nameof(AppStrings.MyDevice)]</PageTitle>
@* 
<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script> *@

<div class="page-basic-style">
    <div class="page-image"></div>
    <div class="page-content">
        <div class="state-info">

            <div class="blox-state">@BloxConnectionService.GetConnections().FirstOrDefault()?.Libp2pStatus</div>

            @if (BloxConnectionService.GetConnections().Any())
            {
                <div class="blox-id-title">Blox Peer ID</div>
                <div class="blox-id-value">@(BloxConnectionService.GetConnections().FirstOrDefault()?.Device.HardwareId)</div>
            }
        </div>

        @if (BloxConnectionService.GetConnections().Any() && BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus != null)
        {
            <div class="gauge-container">
                <div class="gauge-blox">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
                                <RadzenArcGauge Style="width: 100%; height: 50%;">
                                    <RadzenArcGaugeScale Step="20" Min="0" Max="100" MinorStep="2" Radius="1.5" TickPosition=@TickPosition Y="0.9" Margin="0">
                                        <RadzenArcGaugeScaleValue Value="@((double)BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.CpuUsage)" ShowValue=true>
                                            <Template>
                                                <h4>
                                                    @(BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.CpuUsage)%
                                                </h4>
                                            </Template>
                                        </RadzenArcGaugeScaleValue>
                                    </RadzenArcGaugeScale>
                                </RadzenArcGauge>
                            </div>
                        </div>
                    </div>
                    <div class="blox-id-title">Cpu</div>
                </div>

                <div class="gauge-blox">
                    <div class="container">
                        <div class="row">
                            <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
                                <RadzenArcGauge Style="width: 100%; height: 50%;">
                                    <RadzenArcGaugeScale Step="20" Min="0" Max="100" MinorStep="2" Radius="1.5" Y="0.9" Margin="0">
                                        <RadzenArcGaugeScaleValue Value="@((double)BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.MemoryUsage)" ShowValue=true>
                                            <Template>
                                                <div>
                                                    @(BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.CpuUsage)%
                                                </div>
                                            </Template>
                                        </RadzenArcGaugeScaleValue>
                                    </RadzenArcGaugeScale>
                                </RadzenArcGauge>
                            </div>
                        </div>
                    </div>
                    <div class="blox-id-title">Ram</div>
                </div>
            </div>

            @* <div class="container chart-interpolation">
        <div class="row">
        <div class="col-sm-12 my-5">
        <RadzenChart>
        <RadzenAreaSeries Interpolation="@interpolation" Data="@revenue2020" CategoryProperty="Hour" Title="Cpu" LineType="LineType.Solid" ValueProperty="Usage" />
        <RadzenLegend Visible="false"></RadzenLegend>
        <RadzenCategoryAxis Visible="false"/>
        <RadzenValueAxis Min="0" Max="100" TickDistance="8" Formatter="@FormatAsPercent">
        <RadzenGridLines Visible="true"/>
        <RadzenTicks />
        </RadzenValueAxis>
        </RadzenChart>
        </div>
        </div>
        </div> *@
        }
    <div class="installed-stacks">

            @if (CurrentConnection is not null)
            {
                <div class="installed-stacks-title">
                    Installed Stacks:
                </div>

                <div class="installed-stacks-list">
                    <div class="list-content">
                        @if (CurrentConnection.Stacks.Any())
                        {
                            foreach (var stack in CurrentConnection.Stacks)
                            {
                                <div class="new-stack">
                                    <div class="stack-title">
                                        @stack.Stack.Title
                                    </div>

                                    <div class="stack-status">
                                        @if (stack.Status.ToString() == "Running")
                                        {
                                            <div>
                                                0.000034 ETH
                                            </div>
                                            <div class="status-icon running-state"></div>
                                        }
                                        else
                                        {
                                            <div>
                                                @stack.Status
                                            </div>
                                            <div class="status-icon loading-state"></div>
                                        }
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <p>No stack installed yet</p>
                        }
                    </div>
                    <FxButton Text="Add Stack"
                              Width="150px"
                              ButtonStyle="FxButtonStyle.Outline"
                              OnClick="AddStackClicked" />
                </div>
            }
        </div>

    </div>
</div>

