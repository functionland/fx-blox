@page "/MyDevice"
@namespace Functionland.FxBlox.Client.Core.Pages
@inherits AppComponentBase

<PageTitle>@Localizer[nameof(AppStrings.MyDevice)]</PageTitle>

<link rel="stylesheet" href="_content/Radzen.Blazor/css/material-base.css">
<script src="_content/Radzen.Blazor/Radzen.Blazor.js"></script>

<div class="page-container">
    <div class="info-container">

        <div class="page-img"></div>

        <div class="state-info">

            <div class="blox-state">@BloxConnectionService.GetConnections().FirstOrDefault()?.Libp2pStatus</div>

            @if (BloxConnectionService.GetConnections().Any())
            {
                <div class="blox-id-title">Blox App Peer ID:</div>
                <div class="blox-id-value">@(BloxConnectionService.GetConnections().FirstOrDefault()?.Device.HardwareId)</div>
            }
        </div>

        <div class="hardware-info">
            @if (BloxConnectionService.GetConnections().Any() && BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus != null)
            {
                <div class="cpu-info">CPU: @(BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.CpuUsage)%</div>
                <div class="ram-info">RAM: @(BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.MemoryUsage ?? 0) MB</div>

            }
        </div>
    </div>

    @if (BloxConnectionService.GetConnections().Any() && BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus != null)
    {
        <div class="gauge-container">
            <div class="container">
                <div class="row">
                    <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
                        <RadzenArcGauge Style="width: 100%; height: 50%;">
                            <RadzenArcGaugeScale Step="20" Min="0" Max="100" MinorStep="2" Radius="1.5" TickPosition=@TickPosition  Y="0.9" Margin="0">
                                <RadzenArcGaugeScaleValue Value="@((double)BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.CpuUsage)" ShowValue=true>
                                    <Template>
                                        <h4>
                                            @(BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.CpuUsage)%
                                        </h4>
                                    </Template>
                                </RadzenArcGaugeScaleValue>
                            </RadzenArcGaugeScale>
                        </RadzenArcGauge>
                    </div>
                </div>
            </div>

            <div class="container">
                <div class="row">
                    <div class="col-sm-12 col-lg-8 my-3 my-lg-5">
                        <RadzenArcGauge Style="width: 100%; height: 50%;">
                            <RadzenArcGaugeScale Step="20" Min="0" Max="152132" MinorStep="2" Radius="1.5" Y="0.9" Margin="0">
                                <RadzenArcGaugeScaleValue Value="@((double)BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.MemoryUsage)" ShowValue=true>
                                    <Template>
                                        <h4>
                                            @BloxConnectionService.GetConnections().FirstOrDefault()?.LastStatus?.MemoryUsage MB
                                        </h4>
                                    </Template>
                                </RadzenArcGaugeScaleValue>
                            </RadzenArcGaugeScale>
                        </RadzenArcGauge>
                    </div>
                </div>
            </div>
        </div>

        @* <div class="container chart-interpolation">
            <div class="row">
                <div class="col-sm-12 my-5">
                    <RadzenChart>
                        <RadzenAreaSeries Interpolation="@interpolation" Data="@revenue2020" CategoryProperty="Hour" Title="Cpu" LineType="LineType.Solid" ValueProperty="Usage" />
                        <RadzenLegend Visible="false"></RadzenLegend>
                        <RadzenCategoryAxis Visible="false"/>
                        <RadzenValueAxis Min="0" Max="100" TickDistance="8" Formatter="@FormatAsPercent">
                            <RadzenGridLines Visible="true"/>
                            <RadzenTicks />
                        </RadzenValueAxis>
                    </RadzenChart>
                </div>
            </div>
        </div> *@
    }

    <div class="installed-stacks">

        @if (CurrentConnection is not null)
        {
            <div class="installed-stacks-title">
                Installed Stacks:
            </div>

            <div class="installed-stacks-list">
                @if (CurrentConnection.Stacks.Any())
                {
                    foreach (var stack in CurrentConnection.Stacks)
                    {
                        @* <div>
                            @($"{stack.Stack.Title}  {stack.Status}")
                        </div> *@

                        <div class="new-stack">
                            <div class="stack-title">
                                @stack.Stack.Title
                            </div>

                            <div class="stack-status">
                                @if (stack.Status.ToString() == "Running")
                                {
                                    <div>
                                        0.000034 ETH
                                    </div>
                                    <div class="status-icon running-state"></div>
                                }
                                else
                                {
                                    <div>
                                        @stack.Status
                                    </div>
                                    <div class="status-icon loading-state"></div>
                                }
                            </div>
                        </div>
                    }
                }
                else
                {
                    <p>No stack installed yet</p>
                }
                <FxButton Text="Add Stack"
                          Class="add-stack-button"
                          ButtonStyle="FxButtonStyle.Outline"
                          OnClick="AddStackClicked" />
            </div>
        }
    </div>
</div>